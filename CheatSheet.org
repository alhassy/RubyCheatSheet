#+TITLE: Ruby Reference Sheet
# SUBTITLE: /Everything is an object!/
#+MACRO: blurb  Reference of basic commands to get comfortable with Ruby ---Modern and nearly pure OOP!
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]]
#+EMAIL: alhassy@gmail.com
#+INCLUDE: CheatSheet/CheatSheetSetup.org
#+PROPERTY: header-args :results replace value
#+TODO: Todo | spacing LaTeX

* LaTeX Extra, Local, Setup  :ignore:

# Empty by default.
#+LATEX_HEADER: \def\cheatsheeturl{https://github.com/alhassy/RubyCheatSheet}

# The following are the defaults & may be omitted.
#+LATEX_HEADER: \def\cheatsheetcols{2}
#+LATEX_HEADER: \landscapetrue
#+LATEX_HEADER: \def\cheatsheetitemsep{-0.5em}

# Example unicode declarations; see section “unicode” below.
#+LATEX_HEADER: \newunicodechar{‿}{\ensuremath{\smile}}
#+LATEX_HEADER: \newunicodechar{⊕}{\ensuremath{\oplus}}
#+LATEX_HEADER: \newunicodechar{≈}{\ensuremath{\approx}}
#+LATEX_HEADER: \newunicodechar{ℂ}{\ensuremath{\mathbb{C}}}
#+LATEX_HEADER: \newunicodechar{𝑬}{\ensuremath{\mathbf{E}}}
#+LATEX_HEADER: \newunicodechar{∋}{\ensuremath{\ni}}
#+LATEX_HEADER: \newunicodechar{₋}{\ensuremath{_{-}}}

* COMMENT Contents :TOC:QUOTE:ignore:
#+BEGIN_QUOTE
- [[#extra-local-setup][Extra, Local, Setup]]
- [[#administrivia][Administrivia]]
- [[#everything-is-an-object][Everything is an object!]]
- [[#functions----blocks][Functions -- Blocks]]
- [[#methods-as-values][Methods as Values]]
- [[#variables--assignment][Variables & Assignment]]
- [[#strings-and--notation][Strings and ~%~-Notation]]
- [[#booleans][Booleans]]
- [[#break][break]]
- [[#arrays][Arrays]]
- [[#break-1][break]]
- [[#symbols][Symbols]]
- [[#control-flow][Control Flow]]
- [[#hashes][Hashes]]
  - [[#variadic-keyword-arguments][Variadic keyword arguments]]
  - [[#rose-trees][Rose Trees]]
- [[#classes][Classes]]
  - [[#modifiers-public-private-protected][Modifiers: ~public, private, protected~]]
  - [[#even-classes-are-objects][Even classes are objects!]]
  - [[#example-person-class][Example: Person Class]]
  - [[#classes-are-open][Classes are open!]]
- [[#modules--mixins][Modules & Mixins]]
- [[#interview-prep][Interview Prep]]
  - [[#strings--arrays][Strings & Arrays]]
  - [[#linked-lists][Linked Lists]]
  - [[#in-situ-list-reversal][In-situ list reversal]]
  - [[#linked-lists-via-arrays][Linked Lists via Arrays]]
  - [[#given-a-graph-data-of-parent-child-relations-find-the-parents-children-and-the-parentless-people][Given a graph “data” of parent-child relations, find the parents, children, and the parentless people]]
  - [[#walk-down-the-maze-from-top-left-to-bottom-right][Walk down the maze from top-left to bottom-right]]
- [[#reads][Reads]]
#+END_QUOTE

* COMMENT Emacs Setup

  + [[https://github.com/zenspider/enhanced-ruby-mode][Enhanced Ruby Mode]]: Static analysis, such as assigning to unused variables, and smart indentation.
     #+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode)

(add-hook 'ruby-mode-hook 'enh-ruby-mode)
#+END_SRC

#+RESULTS:
| ruby-electric-mode | robe-mode | enh-ruby-mode | inf-ruby-minor-mode |

#+RESULTS:
| enh-ruby-mode | inf-ruby-minor-mode |

  + [[https://github.com/dgutov/robe][Robe-mode]]: Display documentation, jump to definitions, name completion.
#+BEGIN_SRC emacs-lisp
(use-package robe)
(add-hook 'ruby-mode-hook 'robe-mode)

(push 'company-robe company-backends)

;; Autoclose paired syntax elements like parens, quotes, etc
(add-hook 'ruby-mode-hook 'ruby-electric-mode)
#+END_SRC

#+RESULTS:
| ruby-electric-mode | robe-mode | enh-ruby-mode | inf-ruby-minor-mode |

  + In org-blocks:

   #+BEGIN_SRC ruby
RUBY_VERSION
#+END_SRC

    #+RESULTS:
    : 3.0.0

+ [[https://worace.works/2016/06/07/getting-started-with-emacs-for-ruby/][Getting Started with Emacs for Ruby]]
  and
  [[https://wikemacs.org/wiki/Ruby][Ruby with Emacs]]

* Administrivia

  #+latex: \hspace{-1.3em}
  ⇒ Ruby has a interactive command line. In terminal, type ~irb~.

  ⇒ To find your Ruby version, type ~ruby --version~; or in a Ruby script:
    #+BEGIN_SRC ruby
RUBY_VERSION # ⇒ 2.3.7

# In general, use backtics `⋯` to call shell commands
`ls -ll ~` # ⇒ My home directory's contents!
#+END_SRC

⇒ Single line comments marked by ~#~.
@@latex:\newline{\color{white}.}\quad\,@@ Multi-line comments enclosed by ~=begin~ and ~=end~.

⇒ Newline or semicolon is used to separate expressions; other whitespace is irrelevant.

⇒ Variables don't have types, values do.
   - /The type of a variable is the class it belongs to./
   - Variables do not need declarations.

* Everything is an object!

#+latex: \hspace{-1.3em}
Method calls are really message passing:
~x ⊕ y ≈ x.⊕(y) ≈ x.send "⊕" , y~

Methods are also objects:
~f x ≈ method(:f).call x~

*Remember*: Use ~name.methods~ to see the methods a name has access to.
Super helpful to discover features!

#+BEGIN_SRC ruby
"Hi".class                # ⇒ String
"Hi".method(:class).class # ⇒ Method
"Hi".methods              # ⇒ Displays all methods on a class ♥‿♥
2.methods.include?(:/)    # ⇒ true, 2 has a division method
#+END_SRC

:Examples:
#+BEGIN_SRC ruby
# Arithmetic is syntactic sugar: x ⊕ y ≈ x.⊕(y)
2 ** 5 # ⇒ 32, exponent
2.%(5) # ⇒ 2, mod
#+END_SRC
:End:

Everything has a value ---possibly ~nil~.
  - There's no difference between an expression and a statement!

* Functions -- Blocks

#+latex: \hspace{-1.3em}
  Multiple ways to define anonymous functions; application can be a number of ways too.

Parenthesises are optional unless there's ambiguity.

  + The value of the last statement is the ‘return value’.
  + Function application is right-associative.
  + Arguments are passed in with commas.

#+begin_parallel org
#+BEGIN_SRC ruby
fst = lambda { |x, y| x}
fst.call(1, 2)   # ⇒ 1
fst.(1, 2)       # ⇒ 1

# Supply one argument at a time.
always7 = fst.curry.(7)
always7.(42)             # ⇒ 42

# Expplicitly curried.
fst = lambda {|x| lambda {|y| x}}
fst = ->(x) {->(y) {x}}
fst[10][20]  # ⇒ 10
fst.(100).(200)  # ⇒ 100

fst.methods # ⇒ arity, lambda?,
            #   parameters, curry

#+END_SRC

# \columnbreak

#+BEGIN_SRC ruby
def sum x, y = 666, with: 0
  x + y + with end

sum (sum 1, 2) , 3 # ⇒ 6
sum 1              # ⇒ 667
sum 1, 2           # ⇒ 3
sum 1, 22, with: 3  # ⇒ 6
#+END_SRC

#+end_parallel


Notice that the use of ‘=’ in an argument list to mark arguments as *optional* with default values.
We may use *keyword* arguments, by suffixing a colon with an optional default value
to mark the argument as optional; e.g., omitting the ~0~ after ~with:~ makes it a necessary (keyword) argument.
[[https://stackoverflow.com/questions/89650/how-do-you-pass-arguments-to-define-method/11098487#11098487][Such]] may happen in ~|⋯|~ for arguments to blocks.

:Example:
#+BEGIN_SRC ruby
define_method(:foo) do |x = 0, y: 1| "#{x} and #{y}" end

foo 11 , y: 22 # ⇒ 11 and 22

define_method(:woah) do |*z| z end
woah x: "hi" , y: "bye", z: "noice" # ⇒ { :x=>hi, :y=>bye, :z=>noice }
#+END_SRC

:End:

Convention:
Predicate names end in a ~?~; destructive function names end in ~!~.
\newline
That is, methods ending in ~!~ change a variable's value.
  # - These usually come in pairs, with and without the bang, to indicate
  #   those that alter the given arguments and those that return a new changed version.

# latex: \columnbreak

*Higher-order*: We use ~&~ to indicate that an argument is a function.
#+BEGIN_SRC ruby
def apply(x, &do_it) if block_given? then do_it.call(x) else x end end
apply (3) { |n| 2 * n }   # ⇒ 6, parens around ‘3’ are needed!
apply 3 do |n| 20 * n end # ⇒ 6
apply 3                   # ⇒ 3
#+END_SRC

In fact, all methods have an implicit, optional block parameter.
It can be called with the ~yield~ keyword.
#+BEGIN_SRC ruby
sum(1, 2) do |x| x * 0 end  # ⇒ 3, block is not used in “sum”

def sum′ (x, y) if block_given? then yield(x) + yield(y) else x + y end end
sum′(1, 2)                   # ⇒ 3
sum′(1, 2) do |n| 2 * n end  # ⇒ 6
sum′(1, 2) do end # ⇒ nil + nil, but no addition on nil: CRASHES!
sum′(1, 2) { 7 }  # ⇒ 14; Constanly return 7, ignoring arguments; 7 + 7 ≈ 14
#+END_SRC

*Note*: A subtle difference between ~do/end~ and ~{/}~ is that the latter binds tightly to the closest method;
e.g., ~puts x.y { z } ≈ puts (x.y do z end)~.

Variadic number of arguments:
#+BEGIN_SRC ruby
def sum″ (*lots_o_stuff) toto = 0; lots_o_stuff.each{ |e| toto += e}; toto end
sum″ 2 , 4 , 6 , 7  #⇒ 19

# Turn a list into an argument tuple using “splat”, ‘*’
nums = [2, 4, 6, 7, 8, 9]
# sum″ nums  #⇒ Error: Array can't be coerced into number
sum″ *nums.first(4)  #⇒ 19
#+END_SRC

If a name is overloaded as a variable and as a function, then an empty parens must be used
when the function is to be invoked.
# + Like variables, method names may begin with capital letters.
#+BEGIN_SRC ruby
w = "var"
def w; "func" end
"w: #{w}, but w(): #{w()}" # ⇒ w: var, but w(): func
#+END_SRC

How to furnish a single entity with features?
/“Singleton methods/classes”!/ You can attach methods to existing names whenever you like.
(Instance vars are ~nil~ by default.)

#+BEGIN_SRC ruby
x = "ni"
def x.upcase; "Knights who say #{self} × #{@count = (@count || 0) + 1}" end
x.upcase # ⇒ Knights who say ni × 1
x.upcase # ⇒ Knights who say ni × 2

# Other items are unaffected.
"ni".upcase  # ⇒ NI, the usual String capitalisation method
#+END_SRC

In general,
the syntax ~class << x ⋯ end~ will attach /all usual class contents/ “⋯” /only/ for the entity
~x~. ( Undefined instance variables are always ~nil~. )

:Example:
#+BEGIN_SRC ruby
x = "ni"
class << x
  attr_accessor :neato
  def noice
    @neato = 1
    "Woah!: " + self
  end
end

x.noice
x.neato
#+END_SRC

#+RESULTS:
: 1

:End:

We can redfine any method; including the one that handles missing method issues.
#+BEGIN_SRC ruby
x.speak # ⇒ Error: No method ‘speak’
# Do nothing, yielding ‘nil’, when a method is missing.
def method_missing(id, *args) end
x.speak # ⇒ nil
#+END_SRC

A “ghost method” is the name of the technique to dynamically a create a method
by overriding ~method_missing~. E.g., [[https://gist.github.com/Integralist/a29212a8eb10bc8154b7#file-04-dynamic-proxies-rb][by forwarding]] ghosts ~get_x~ as calls ~get(:x)~
/with/ extra logic about them.
# Exercise: Make a class ~Roman~ that only overrides only ~method_missing~
# so that ~Roman.XL~ and ~Roman.XXVI~ yields 40 and 26, respectively.

Operators are syntactic sugar and can be overrided.
This includes the arithmetical ones, and ~[]~, ~[]=~; and unary ± via ~+@~, ~-@~.
#
#+begin_parallel org
#+BEGIN_SRC ruby
def x.-(other); "nice" end
x - "two" # ⇒ "nice"
#+END_SRC
#+latex: \columnbreak

Forming aliases:
#+BEGIN_SRC ruby

alias summing sum″
summing 1, 2, 3  # ⇒ 6
#+END_SRC
 #+end_parallel

# LATEX: \ifnum\cheatsheetcols=1  \else \vspace{-4em} \fi
** COMMENT Prickly Parts
#+BEGIN_SRC ruby
ok₀ = lambda {|x| x}
def ok₁ x; x end
ok₀.class            # ⇒ Proc
(method :ok₁).class  # ⇒ Method
#+END_SRC

* Methods as Values

#+latex: \hspace{-1.3em}
Method declarations are expressions:
A method definition returns the method's name as a symbol.
#+BEGIN_SRC ruby
def woah; "hello" end # ⇒ :woah

woah′ = method(:woah) # ⇒ #<Method: Object#woah>

woah′.call # ⇒ hello

method(:woah).call # ⇒ hello
#+END_SRC

Notice that using the operation ~method~ we can obtain the method associated with a symbol.

Likewise, <<<~define_method~>>> takes a name and a block, and ties those together to make a method.
It overrides any existing method having that name.

The following is known as “decoration” or “advice”!

Besides decorating a function call to print a trace like below,
it can be used to add extra behaviour such as [[https://dev.to/baweaver/decorating-ruby-part-1-symbol-method-decoration-4po2][caching]] expensive calls,
[[https://relishapp.com/rspec/rspec-mocks/docs][mocking]] entities for testing, or doing a form of [[https://alhassy.github.io/TypedLisp/#typing-via-macros][typing]]
( [[http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/][Ruby is a Lisp]] ).

#+BEGIN_SRC ruby
define_method(:ni) {|x| x}

def notify(method_name)
  orginal = method(method_name)
  define_method(method_name) { |*args, &blk|
    p "#{method_name} running ... got #{orginal.call(*args, &blk)}"} end

notify def no_op (x) x end

no_op 1 # ⇒ no_op running ... got 1

# “x.singleton_class.include(M)” to wholesale attach module M's contents to x.
#+END_SRC

See [[https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Method_Calls][here]] for a nifty article on methods in Ruby.

* Variables & Assignment
#+latex: \hspace{-1.3em}
Assignment ‘=’ is right-associative and returns the value of the RHS.
#+BEGIN_SRC ruby :results value
# Flexible naming, but cannot use ‘-’ in a name.
this_and_that = 1
𝓊ℕ𝒾ℂ∅𝒟𝑬     = 31

# Three variables x,y,z with value 2.
x = y = z = 2

# Since everything has a value, “y = 2” ⇒ 2
x = 1, y = 2  # Whence, x gets “[1, 2]”!
# Arrays are comma separated values; don't need [ and ]

x = 1; y = 2  # This is sequential assignment.

# If LHS as has many pieces as RHS, then we have simultenous assignment.
x , y = y , x # E.g., this is swap

# Destructuring with “splat” ‘*’
a , b, *more = [1, 2, 3, 4, 5] # ⇒ a ≈ 1; b ≈ 2; c ≈ [3, 4, 5]
first, *middle, last = [1, 2, 3, 4, 5] # ⇒ first ≈ 1; middle ≈ [2, 3, 4]; last = 5
last

# Without splat, you only get the head element!
a , b, c = [1, 2, 3, 4, 5] # ⇒ a ≈ 1; b ≈ 2; c ≈ 3
#+END_SRC

“Assign if undefined”: ~x ||= e~ yields ~x~ if it's a defined name, and is ~x = e~ otherwise.
This is useful for having local variables, as in loops or terse function bodies.
#+BEGIN_SRC ruby :results value
nope rescue "“nope” is not defined."
# nope ||= 1 # ⇒ nope = 1
# nope ||= 2 # ⇒ 1, since “nope” is defined
#+END_SRC
Notice: ~B rescue R~ ≈ Perform code ~B~, if it crashes perform code ~R~.

** COMMENT Scope
#+BEGIN_SRC ruby :results value
# Variable scope is determined by name decoration.
# Constants are names that begin with a captial letter.
$a = 2; @a = 3; @aa = 4; A = 5
[defined? a, defined? $a, defined? @a, defined? @@a, defined? A]
# ⇒ [local-variable , global-variable , instance-variable , hline, constant]
#+END_SRC

* Strings and ~%~-Notation

#+latex: \hspace{-1.3em}
Single quotes are for string literals,
    whereas double quotes are for string evaluation, [[https://www.google.com/search?q=interpolation&oq=interpolation&aqs=chrome..69i57j0l5.724j0j7&sourceid=chrome&ie=UTF-8][‘interpolation’]].
    Strings may span multiple lines.
    #
#+begin_parallel org
#+BEGIN_SRC ruby
you = 12
# ⇒ 12

"Me and \n #{you}"
# ⇒ Me and ⟪newline here⟫ 12

'Me and \n #{you}'
# ⇒ Me and \n #{you}

# “to string” and catenation
"hello " + 23.to_s  # ⇒ hello 23

# String powers
"hello " * 3
# ⇒ hello hello hello

# Print with a newline
puts "Bye #{you}"
# ⇒ Bye 12 ⇒ nil

# printf-style interpolation
"%s or %s" % ["this" , "that"]
it = %w(this that); "%s or %s" % it
#+END_SRC

#+end_parallel

Strings are essentially arrays of characters, and so array operations work as expected!

There is a Perl-inspired way to quote strings, by using % along with any
non-alpha-numeric character acting as the quotation delimiter.
Now only the new delimiter needs to be escaped; e.g., ~"~ doesn't need escape.

A type modifier can appear after the ~%~ :
  ~q~ for strings, ~r~ for regexp, ~i~ symbol array, ~w~ string array, ~x~ for shell command,
  and ~s~ symbol. Besides ~x, s~, the rest can be capitalised to allow interpolation.

#+BEGIN_SRC ruby
%{ woah "there" #{1 + 2} }  # ⇒ "woah \"there\" 3"
%w[ woah "there" #{1 + 2} ] # ⇒ ["woah", "\"there\"", "\#{1", "+", "2}"]
%W[ woah "there" #{1 + 2} ] # ⇒ ["woah", "\"there\"", "3"]
%i( woah "there" )          # ⇒ [ :woah, :"there"]
#+END_SRC

See [[https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Literals#The_%25_Notation][here]] for more on the %-notation.

# latex: \vspace{-2em}

* Booleans

#+latex: \hspace{-1.3em}
 ~false, nil~ are both considered /false/; all else is considered /true/.
+ Expected relations: ~==, !=, !, &&, ||, <, >, <=, >=~
+ ~x <=> y~ returns 1 if ~x~ is larger, 0 if equal, and -1 otherwise.
+ “Safe navigation operator”: ~x&.y ≈ (x && x.y)~.
+ ~and, or~ are the usual logical operators but with lower precedence.
+ They're used for control flow; e.g.,
        ~s₀ and s₁ and ⋯ and sₙ~ does each of the ~sᵢ~ until one of them is false.

:Example:
#+BEGIN_SRC ruby
x = "nice"
x.upcase

y = nil
# y.upcase # ⇒ crash, undefined method
y&.upcase # ⇒ nil ^_^
#+END_SRC

#+RESULTS:
: nil

:End:

Since [[http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/][Ruby is a Lisp]], it comes with [[http://rubylearning.com/blog/2010/11/17/does-ruby-have-too-many-equality-tests/][many equality operations]]; including ~=~~ for regexps.

* spacing break                                                      :ignore:
#+latex: \columnbreak
* Arrays

#+latex: \hspace{-1.3em}
  Arrays are heterogeneous, 0-indexed, and [ brackets ] are optional.
#+BEGIN_SRC ruby
array   = [1, "two", :three, [:a, "b", 12]]
again   =  1, "two", :three, [:a, "b", 12]
#+END_SRC

Indexing: ~x[±i]~ ≈ “value if i < x.length else nil”
~x[i]~ ⇒ The /i-th/ element from the start; ~x[-i]~ ⇒ /i-th/ element from the end.
#+BEGIN_SRC ruby
array[1]     # ⇒ "two"
array[-1][0] # ⇒ :a
#+END_SRC

Segments and ranges:
 | ~x[m, k] ≈ [xₘ, xₘ₊₁, …, xₘ₊ₖ₋₁]~                         |
 | ~x[m..n] ≈ [xₘ, xₘ₊₁, …, xₙ]~ if $m ≤ n$ and ~[]~ otherwise |
 | ~x[m...n] ≈ x[m..n-1]~ ---to exclude last value           |
 | ~a[i..j] = r~ ⇒ ~a ≈ a[0, i] + *r + a[j, a.length]~         |
 | Syntactic sugar: ~x[i] ≈ x.[] i~                          |
#
Where ~*r~ is array coercion:
Besides splicing, <<<splat>>> is also used to coerce values into arrays;
some objects, such as numbers, don't have a ~to_a~ method, so this makes up for it.
#+BEGIN_SRC ruby
a = *1      # ⇒ [1]
a = *nil    # ⇒ []
a = *"Hi"   # ⇒ ["Hi"]
a = *(1..3) # ⇒ [1, 2, 3]
a = *[1,2]  # ⇒ [1, 2]

# Non-symmetric multiplication; x * y ≈ x.*(y)
[1,2,3] * 2    # ⇒ [1,2,3,1,2,3]
[1,2,3] * "; " # ⇒ "1; 2; 3"
#+END_SRC

As always, learn more with ~array.methods~ to see, for example,
~first, last, reverse, push and << are both “snoc”, include? “∋”, map~.
Functions ~first~ and ~last~ take an optional numeric argument $n$
to obtain the /first n/ or the /last n/ elements of a list.

Methods yield new arrays; updates are performed by methods ending in “!”.
#+BEGIN_SRC ruby :results output
x = [1, 2, 3]  # A new array
x.reverse      # A new array; x is unchanged
x.reverse!     # x has changed!

# Traverse an array using “each” and “each_with_index”.
x.each do |e| puts e.to_s end
#+END_SRC

Catenation ~+~, union ~|~, difference ~-~, intersection ~&~.
\newline
[[https://itnext.io/a-ruby-cheatsheet-for-arrays-c8e5275155b5][Here]] is a cheatsheet of array operations in Ruby.

What Haskell calls ~foldl~, Ruby calls ~inject~; \newline e.g.,
~xs.inject(0) do |sofar, x| sofar + x end~ yields the sum of ~xs~.

* spacing break                                                      :ignore:
#+latex: \columnbreak
* Symbols

#+latex: \hspace{-1.3em}
  Symbols are immutable constants which act as /first-class variables./
  + Symbols evaluate to themselves, like literals ~12~ and ~"this"~.

#+begin_parallel org
#+BEGIN_SRC ruby
:hello.class # ⇒ Symbol
# :nice = 2 # ⇒ ERROR!

# Conversion from strings
"nice".to_sym == :nice  # ⇒ true
#+END_SRC
#+end_parallel

#+latex: \vspace{-1em}
Strings occupy different locations in memory
even though they are observationally indistinguishable.
In contrast, all occurrences of a symbol refer to the same memory location.

#+BEGIN_SRC ruby
:nice.object_id == :nice.object_id   # ⇒ true
"this".object_id == "this".object_id # ⇒ false
#+END_SRC


#+latex: \vspace{-0.5em}
* Control Flow

#+latex: \hspace{-1.3em}
We may omit ~then~ by using ~;~ or a *newline*, and
may contract ~else if~ into ~elsif~.
#+BEGIN_SRC ruby
# Let 𝒞 ∈ {if, unless}
1. 𝒞 :test₁ then :this else :that end
2. this 𝒞 test  ≈  𝒞 test then this else nil end
3. 𝒞 condition; body end
#+END_SRC
#+BEGIN_SRC ruby :results output
  (1..5).each do |e| puts e.to_s end
≈ 1 .upto 5 do |e| puts e end
≈ 5 .downto 1 do |e| puts 6 - e end
≈ for e in 1..5 do puts e.to_s end
≈ e = 1; while e <= 5 do puts e.to_s; e += 1 end
≈ e = 1; begin puts e.to_s; e += 1 end until e > 5
≈ e = 1; loop do puts e.to_s; e += 1; break if e > 5 end
#+END_SRC

Just as ~break~ exits a loop, ~next~ continues to the next iteration,
and ~redo~ restarts at the beginning of an iteration.

There's also times for repeating a block a number of times, and step for
traversing over every /n/-th element of a collection.
#+BEGIN_SRC ruby :results output
n.times   S ≈ (1..n).each S
c.step(n) S ≈ c.each_with_index {|val, indx| S.call(val) if indx % n == 0}
#+END_SRC
:Example:
#+BEGIN_SRC ruby :results output
('a'..'z').step(3) do |e| puts e end
puts " --- indeed ---"
('a'..'z').each_with_index do |val, index| puts val if index % 3 == 0 end
#+END_SRC

#+RESULTS:
#+begin_example
a
d
g
j
m
p
s
v
y
 --- indeed ---
a
d
g
j
m
p
s
v
y
#+end_example
:End:

See [[https://www.thegeekstuff.com/2018/05/ruby-loop-examples/][here]] for a host of loop examples.


#+latex: \vspace{-1em}
* spacing COMMENT break                                                      :ignore:
#+latex: \columnbreak
* Hashes
#+latex: \hspace{-1.3em}
 Also known as finite functions, or ‘dictionaries’ of key-value pairs
 ---a dictionary matches words with their definitions.

 Collections are buckets for objects; hashes are labelled buckets:
   The label is the key and the value is the object.
 Thus, hashes are like objects of classes, where the keys are slots that are tied to values.

#+BEGIN_SRC ruby :results output
hash = { "jasim" => :farm, :qasim => "hockey", 12 => true}

hash.keys     # ⇒ ["jasim", :qasim, 12]
hash["jasim"] # ⇒ :farm
hash[12]      # ⇒ true
hash[:nope]   # ⇒ nil
#+END_SRC

Simpler syntax when all keys are symbols.
#+BEGIN_SRC ruby :results output
oh = {this: 12, that: "nope", and: :yup}
oh.keys  #⇒ [:this, :that, :and]
oh[:and] # ⇒ :yup

# Traverse an array using “each” and “each_with_index”.
oh.each do |k, v| puts k.to_s end
#+END_SRC

As always, learn more with
~Hash.methods~  to get ~keys, values, key?, value?, each, map, count, ...~
and even the “safe navigation operator” ~dig~:
~h.dig(:x, :y, :z) ≈ h[:x] && h[:x][:y] && h[:x][:y][:z]~.

** Variadic keyword arguments
We may pass in any number of keyword arguments using ~**~.
#+BEGIN_SRC ruby
def woah (**z) z[:name] end

woah name: "Jasim" , work: "Farm" #⇒ Jasim
#+END_SRC

** Rose Trees
Hashes can be used to model (rose) trees:
#+BEGIN_SRC ruby
family = {grandpa: {dad:  {child1: nil, child2: nil},
                   uncle: {child3: nil, child4: nil},
                   scar:  nil}}

# Depths of deepest node.
def height t
    if not t
    then 0
    else t.map{|k, v| height v}.map{|e| e + 1}.max
    end end

height family # ⇒ 3
#+END_SRC

** COMMENT Mimicking keyword args
Hashes don't need braces when arguments to a function; we can mimic keyword args this way!
#+BEGIN_SRC ruby
def sum them
  them[:first] + them[:second] end

sum( :second => 3, :first => 1 )
sum( first: 12, second: 12 )
#+END_SRC

#+RESULTS:
: 24

* Classes
  :Important_Remark:

  When working with top-level class definitions org-babel complains
  that the definition is taking place in a method, which Ruby disallows.
  ( If you really want that, turn it into a string and call ~eval~. )

  However, using ~:results output~ allows me to have classes and use ~C-c C-c~ on
  org-babel blocks ^_^

  :End:

#+latex: \hspace{-1.3em}
/<<<Classes>>> are labelled product types: They denote values of tuples with named components./
Classes are to objects as cookie cutters (templates) are to cookies.

** Modifiers: ~public, private, protected~

Modifiers: ~public, private, protected~

  + Everything is public by default.
  + One a modifier is declared, by itself on its own line, it remains in effect
    until another modifier is declared.
  + Public  ⇒ Inherited by children and can be used without any constraints.
  + Protected ⇒ Inherited by children, and may be occur freely /anywhere/ in the class definition;
    such as being called on other instances of the same class.
  + Private ⇒ Can only occur stand-alone in the class definition.

  These are forms of advice.

** Even classes are objects!
~Class~ is also an object in Ruby.

#+BEGIN_SRC ruby
  class C ⟪contents⟫ end
≈
  C = Class.new do ⟪contents⟫ end
  #+END_SRC

:Example:
#+BEGIN_SRC ruby :results output
C = Class.new do attr_accessor :hi end

c = C.new
c.hi = 12
puts "#{c.hi} is neato"
#+END_SRC
:End:

** Example: Person Class

/Instance attributes/ are variables such that each object has a different copy;
their names must start with ~@~ ---“at” for “at”tribute.
# Changing one variable in one object doesn't change that variable's value in another object.

/Class attributes/ are variables that are mutually shared by all objects;
their names must start with ~@@~ ---“at all” ≈ attribute for all.

~self~ refers to the entity being defined as a whole; ~name~ refers to the entities string name.
#+BEGIN_SRC ruby :tangle test.rb :results output
class Person

  @@world = 0 # How many persons are there?
  # Instance values: These give us a reader “x.field” to see a field
  # and a writer “x.field = …” to assign to it.
  attr_accessor :name
  attr_accessor :work

  # Optional; Constructor method via the special “initialize” method
  def initialize (name, work) @name = name; @work = work; @@world += 1 end

  # See the static value, world
  def world
    @@world
  end

  # Class methods use “self”;
  # they can only be called by the class, not by instances.
  def self.flood
    puts "A great flood has killed all of humanity"; @@world = 0 end

end

jasim = Person.new("Qasim", "Farmer")
qasim = Person.new("", "")
jasim.name = "Jasim"

puts "#{jasim.name} is a #{jasim.work}"
puts "There are #{qasim.world} people here!"
Person.flood
puts "There are #{qasim.world} people here!"
#+END_SRC

+ See here to learn more about the [[https://blog.appsignal.com/2018/08/07/ruby-magic-changing-the-way-ruby-creates-objects.html][new]] /method/.

Using ~define_method~ along with
  ~instance_variable_set("@#namehere", value)~ and ~instance_variable_get("@#namehere")~,
  we can elegantly form a number of related methods from a list of names; e.g.,
  recall ~attr_accessor~. Whence *design patterns become library methods!*

** Classes are open!
# Classes are open!

/In Ruby, just as methods can be overriden and advised, classes are open: They can be extended anytime./
This is akin to C# extension methods or Haskell's typeclasses.
#+BEGIN_SRC ruby :results output
# Open up existing class and add a method.
class Fixnum
  def my_times; self.downto 1 do yield end end
end

3.my_times do puts "neato" end # ⇒ Prints “neato” thrice
#+END_SRC

#+latex: \columnbreak
+ We can freely add and alter class continents long after a class is defined.
+ We may even alter core classes.
+ Useful to extend classes with new functionality.

* Modules & Mixins

  #+latex: \hspace{-1.3em}
Single parent inheritance: ~class Child < Parent ⋯ end~,
for propagating behaviour to similar objects.

A ~module~ is a collection of functions and constants,
whose contents may become part of any class.
Implicitly, the module will depend on a number of class methods
---c.f., Java interfaces--- which are used to implement the module's
contents. This way, we can /mix in/ additional capabilities into objects
regardless of similarity.

Modules:
+ Inclusion binds module contents to the class instances.
+ Extension binds module contents to the class itself.

#+BEGIN_SRC ruby :results output
# Implicitly depends on a function “did”
module M; def go; "I #{did}!" end end

# Each class here defines a method “did”; Action makes it static.
# Both include the module; the first dynamically, the second statically.
class Verb; include M;  def did; "jumped" end end
class Action; extend M; def self.did; "sat"  end end

puts "#{Verb.new.go} versus #{Action.go}"
# ⇒ I jumped! versus I sat!
#+END_SRC

For example, a class wanting to be an ~Enumerable~ must implement ~each~
and a class wanting to be ~Comparable~ must implement the ‘spaceship’
operator ~<=>~. In turn, we may then use ~sort, any?, max, member?, …~;
run ~Enumerable.instance_methods~ to list many useful methods.

Modules are also values and can be defined anywhere:
#+BEGIN_SRC ruby
mymod = Module.new do def talk; "Hi" end end
#+END_SRC

* Todo COMMENT more

** Printing and Comments
#+BEGIN_SRC ruby
# Print with p, puts, print
p 1 , 2, :three # ⇒ 1, 2, :three

# Like PHP and Perl, “heredoc” quotes long strings: Left quote is <<XYZ and right
# quote is XYZ, where XYZ is any sequence of characters. Use <<'XYZ' for the text
# to not be interpolated.
b = <<XXX
hello
XXX
c = <<'abc'
ddd hello
abc
#+END_SRC

** “Ruby is Pure OO” -- 99% true!?

In pure OO, such as Smalltalk, conditional constructs are not part of the language
but are instead merely defined behaviour for the Boolean class. That is, one sends
a message to a Boolean object on how to proceed, rather than taking action by inspecting it.

+ Smalltalk syntax: b ifTrue: [ ⋯ ] .
+ Ruby syntax: if b then ⋯ end

Looking at, for example, true.methods does not seem that a conditional operation
is defined for the Boolean class.

Likewise for loops, and chains of and's and or's.

How can control flow be construed as message passing in Ruby?
---Without adding it ‘after the fact’ with something like this:
#+BEGIN_SRC ruby :results output
class TrueClass
  def ifTrue; yield; end
end

class FalseClass
  def ifTrue; self; end
end

puts ((1 == 0 + 1).ifTrue do "hi" end) # ⇒ "hi". Need parens for some reason; why!?
puts  (1 == 0).ifTrue do "hi" end      # ⇒ "false"
#+END_SRC

#+RESULTS:
: hi
: false
: false

( Incidentally, how do I get at the Boolean expressions themselves?
  How can I obtain, say 1 == 0, in the second example above and for example
  print it as “1 == 0” rather than “false”. Moreover, “1 == 0” is really “1.send(:=, 0)”,
  so how can I get access to the object 1, the method ==, and the other argument, 0?
)

I'm nearly a week new into Ruby; thanks for being patient.

https://www.reddit.com/r/ruby/comments/cz2v9t/ruby_is_pure_oo_99_true/

** η rule

In mathematics, the “η-rule”, a form of extensionality, says
$$
   (λ x → f x)  ≈  f
$$
In almost this form, this rule holds for Haskell and Lisp. **How does this rule hold for Ruby?**

With the help of some code, see below, I have arrived at this rule:

    # Using methods (references) in place of blocks:
    ~h do |e| g e end ≈ h(&method(:g))~

    Provided ~h~ takes an explicit block and ~g~ is defined using ~def~.
    If ~g~ is defined using ~lambda~, then rhs is ~h(&g)~.

Below is some code to back this up.
However, *can this rule be stated more tersely?* My observation does not
account for the case ~h~ takes an implicit block. How is that treated?

#+BEGIN_SRC ruby
def go; "Hello" end
go′ = lambda { "Hola" }
def go¹ (x) "Hey, #{x}" end
go′¹ = lambda {|x| "Yo, #{x}"}

def explicit (&blk) blk.call end
explicit do go end     # ⇒ Hello
explicit(&method(:go)) # ⇒ Hello
explicit(&go′)         # ⇒ Hola′
#
# “&:” not uniform?
explicit(&:go) rescue "crashes"
explicit(&:go′) rescue "crashes"
[1,2,3].map(&:to_s)    # ⇒ ["1", "2", "3"]

def explicit¹ (&blk) blk.call(1) end
explicit¹ do |x| x.to_s end # ⇒ "1"
explicit¹(&:to_s)           # ⇒ "1"
explicit¹(&method(:go¹))    # ⇒ "Hey, 1"
explicit¹(&:go¹) rescue "crashes"
explicit¹(&:go′¹) rescue "crashes"
explicit¹(&go′¹) # ⇒ "Yo, 1"

def implicit; yield end
implicit do go end # ⇒ Hello
# implicit (&method(:go)) ⇒ Syntax error!

def implicit¹; yield(1) end
implicit¹ do |x| go¹ x end   # ⇒ "Hey, 1"
# implicit¹ (&method(:go¹))  # ⇒ Syntax error
#+END_SRC

I'm nearly a week new into Ruby; thanks for being patient.

https://www.reddit.com/r/ruby/comments/cz2msl/etaconversion_in_ruby_what_do/

* COMMENT Structures and ADTS

  A ‘structure’ is just a bunch of items grouped together ---like a named product.
  This is made by declaring a class with the names that can be read and written to,
  and a constructor.

* Interview Prep

** Strings & Arrays

*** unique elements
   #+begin_src ruby :results output
def distinct? arr
  arr.all? { |x| arr.count(x) == 1 }
end

p  distinct? [1, 2, 3]
p  distinct? "hello".split(//)
#+end_src

*Warning!* =arr.count x == 1= is /parsed/ as ~arr.count (x == 1)~, which is a number and
so is truthy!

/Ruby's scope is to the end of the line!/

*** palindromes
 #+begin_src ruby :results output
def palindrome? arr
 arr == arr.reverse
end

p palindrome? [1,2,3,2,1]
p palindrome? [1,2,3,2,]

class Array
  def mypalin?
    self == self.reverse
  end
end

p [1,2,1].mypalin?
 #+end_src

*** matrices

    If the (r,c) entry in a martrix is 0, then
    zero out row r and column c.

 #+begin_src ruby :results output
def zerofy! mtrx
  zero_cols = [] # Which columns need to be zeroed out?
  # Zero out rows
  mtrx.each_with_index do |row, r|
    row.each_with_index do |elem, c|
      if elem == 0
        mtrx[r].map! {|x| 0}
        zero_cols << c
        break
      end
    end
  end
  # Zero out columns
  zero_cols.each do |c|
    mtrx.each_index do |r|
      mtrx[r][c] = 0
    end
  end
end

m = [ [1, 0, 3], [1, 2, 3], [1, 2, 3] ]
zerofy! m
p m
    #+end_src

    #+RESULTS:
    : [[0, 0, 0], [1, 0, 3], [1, 0, 3]]

** Linked Lists

#+begin_src ruby :results output
class LinkedList
  attr_accessor :head, :tail

  def cons value
    new_tail = LinkedList.new
    new_tail.head = @head
    new_tail.tail = @tail
    @tail = new_tail
    @head = value
  end

  def show
    p @head if @head
    @tail.show if @tail
  end

  def get n
    if n == 0
    then @head
    else @tail.get (n-1)
    end
  end

  def rmv_dups
    seen = @head ? [@head] : []
    tail = @tail
    while tail
      hd = tail.head
      seen << hd unless not hd or seen.include? hd
      tail = tail.tail
    end
    newtail = LinkedList.new
    seen[1..].reverse.each {|e| newtail.cons e }
    @tail = newtail
    @head = seen[0]
    self
  end

end

l = LinkedList.new
l.show
p "Nothing printed for previous call"

l.cons(1) # [1]
l.cons(2) # [2, 1]
l.cons(3) # [3, 2, 1]
l.cons(1) # [1, 3, 2, 1]
l.show

p "Got: #{l.get(1)}"

p "---"
l.rmv_dups
l.show


#+end_src

#+RESULTS:
#+begin_example
"Nothing printed for previous call"
1
3
2
1
"Got: 3"
"---"
1
3
2
#+end_example

** In-situ list reversal

   Go half way and swap elements in first half with those of the second.

   This is  nearly verbatim what is required by a specification of list reversal
   ;-) ---viz, ∀ i • output[i] = input[length - 1 - i].

#+begin_src ruby :results output
def insitu l
  n = l.length
  for i in 0...n/2 do
    l[i], l[n - 1 - i] = l[n-1-i], l[i]
  end
  l
end

p insitu [1,2,3,4,5]
#+end_src

** Linked Lists via Arrays
#+begin_src ruby :results output
class LinkedList

  # Invariant: Following @head within @memory is the list;
  # inaccessible stuff within @memory is garbage ---this is not a graph!

  attr_reader :length

  def initialize length
    @length = length
    @memory = [{value: nil, next: nil}] * length
    @free   = (0...length).to_a # unoccupied addresses
    @head   = nil # points nowhere; could've used ‘-1’.
  end

  # E.g., [0//] [1//] [2//] [3//]
  # This depicts 4 memory slots with addresses in the first slot.
  # The following shows the “addresses/values/next-pointer”:
  # [0/C/] [1/B/0] ⟪2/A/1⟫ [3//]
  # Ignoring the memory locations, this is the list [A, B, C].
  # Notice that the ⟪head⟫ of the list is emphasised differently.
  def show
    @memory.each_with_index do |e, i|
      if i == @head
      then print " ⟪#{i}/#{e[:value]}/#{e[:next]}⟫"
      else print " [#{i}/#{e[:value]}/#{e[:next]}]"
      end
    end
  end

  def delete address
    if (0...@length).include? address

      # Get parent and child pointers
      parentp = (0...@length).to_a.filter {|i| @memory[i][:next] == address}.pop
      parentp = parentp
      childp  = @memory[address][:next]

      # Delete the stuff at the address & reclaim memory
      @memory[address] = {value: nil, next: nil}
      @free << address
      #
      # Alter the (grand)parent and child pointers
      @memory[parentp][:next] = childp if parentp # @head has no parent!
      @head = childp if not parentp # i.e., we're deleting @head
      #
      # yield the memory
      @memory

    end
  end

  def cons value

    headp = @head
    tailp = @head and @memory[@head][:next]

    raise "Error: Out of memory!" if @free.empty?
    @head = @free[0]
    @free = @free[1..]

    @memory[@head] = {value: value, next: headp}

    @memory
  end

end


l = LinkedList.new 4
l.show
l.cons :C
l.cons :B
l.cons :A
# l.cons :W
# l.cons :WW # ⇒ Error: Out of memory!
puts ""
l.show  # A → B → C
puts ""
l.delete 1
l.show # A → C
l.delete 2
puts ""
l.show
# p l.delete 1
#+end_src

#+RESULTS:
:  [0//] [1//] [2//] [3//]
:  [0/C/] [1/B/0] ⟪2/A/1⟫ [3//]
:  [0/C/] [1//] ⟪2/A/0⟫ [3//]
:  ⟪0/C/⟫ [1//] [2//] [3//]

** Given a graph “data” of parent-child relations, find the parents, children, and the parentless people

Suppose we have some input data describing a graph of relationships between
parents and children over multiple generations. The data is formatted as a list
of (parent, child) pairs, where each individual is assigned a unique integer
identifier.

For example, in this diagram, 3 is a child of 1 and 2, and 5 is a child of 4:

1   2    4
 \ /   / | \
  3   5  8  9
   \ / \     \
    6   7     11

Write a function that takes this data as input and returns two collections: one
 containing all individuals with zero known parents, and one containing all
 individuals with exactly one known parent.

Sample output:
Zero parents: 1, 2, 4
One parent: 5, 7, 8, 9, 11

#+begin_src ruby :results output
data     = [[1, 3], [2, 3], [3,6], [5,6], [5,7], [4,5], [4,8], [4,9], [9, 11]]

people   = data.concat.flatten.uniq
children = people.filter {|p| data.any? {|d| d[0] == p} }
parents  = people.filter {|p| data.any? {|d| d[1] == p} }
parentless = people.filter {|p| data.all? {|d| d[1] != p} }
half_orphan = people.filter { |p| data.count {|d| d[1] == p} == 1} # Has one parent

p data, people, children, parents, parentless, half_orphan

# For added readability
class Integer
  # rel = [parent, child] relationships
  def parent? rel    # “source incidence”
    rel[0] == self
  end
  def child? rel     # “target incidence”
    rel[1] == self
  end
end

# Now, the parentless people...
p people.filter { |p| not data.any? {|d| p.child? d}}
#+end_src

#+RESULTS:
: [[1, 3], [2, 3], [3, 6], [5, 6], [5, 7], [4, 5], [4, 8], [4, 9], [9, 11]]
: [1, 3, 2, 6, 5, 7, 4, 8, 9, 11]
: [1, 3, 2, 5, 4, 9]
: [3, 6, 5, 7, 8, 9, 11]
: [1, 2, 4]
: [5, 7, 8, 9, 11]
: [1, 2, 4]

That was fun ;-)

** Walk down the maze from top-left to bottom-right

 A city map of only horizontal and vertical streets is a grid, matrix, which is
 inductively defined and so we can solve this problem by recursion.

 Try taking a step rightward, now we have a smaller map to consider ---we dropped
 the first column---, now solve the problem recursively. If that fails,
 then instead, try taking a step downward, and solve the problem recursively.

 At each step, we discard a row or a column and so the input is structural
 smaller and we terminate when the input is at most a singleton, hence this terminates.

 #+begin_src ruby :results output
# A 0 means we can move in that direction, a -1 means there is a blockage such
# as a wall or building and so movement is not possible in that direction.
map = [ [ 0 , 0, 0, -1, 0  ],
        [-1 , 0, 0, -1, -1 ],
        [ 0 , 0, 0, -1, 0  ],
        [-1 , 0, 0,  0, 0  ],
        [ 0 , 0, -1, 0, 0  ]
      ]

def walk map, path
  if map.count <= 1  and (map[0] && map[0].count <= 1) # at most one row, with at most 1 col
  then [true, path] # This is the path to go from top left to bottom right!
  else
    p path
    map.each {|r| p r}
    p "--------------------------------------------------------------------------------"
    # Take a step right and solve recursively
    (map[0] and map[0][1] == 0 and walk map.map {|r| r.drop 1 }, (path + [:right])) or
      # If no path that way, take a step down and solve recursively
      (map[1] and map[1][0] == 0 and walk (map.drop 1), (path + [:down]))
  end
end

# map.map! {|r| r.drop 1 }
# map = map.drop 1
# map.each {|r| p r};

p walk map, []

# Nope: After (2,2), there's no more possible moves!
another = [[ 0, 0, 0, -1, 0],
          [-1, 0, 0, -1, -1],
          [ 0, 0, 0, -1, 0],
          [-1, 0, -1, 0, 0],
          [ 0, 0, -1, 0, 0]]

p walk another, []
 #+end_src

 #+RESULTS:
 #+begin_example
[]
[0, 0, 0, -1, 0]
[-1, 0, 0, -1, -1]
[0, 0, 0, -1, 0]
[-1, 0, 0, 0, 0]
[0, 0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right]
[0, 0, -1, 0]
[0, 0, -1, -1]
[0, 0, -1, 0]
[0, 0, 0, 0]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right]
[0, -1, 0]
[0, -1, -1]
[0, -1, 0]
[0, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down]
[0, -1, -1]
[0, -1, 0]
[0, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down, :down]
[0, -1, 0]
[0, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down, :down, :down]
[0, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down, :down, :down, :right]
[0, 0]
[0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down, :down, :down, :right, :right]
[0]
[0]
"--------------------------------------------------------------------------------"
[true, [:right, :right, :down, :down, :down, :right, :right, :down]]
[]
[0, 0, 0, -1, 0]
[-1, 0, 0, -1, -1]
[0, 0, 0, -1, 0]
[-1, 0, -1, 0, 0]
[0, 0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right]
[0, 0, -1, 0]
[0, 0, -1, -1]
[0, 0, -1, 0]
[0, -1, 0, 0]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right]
[0, -1, 0]
[0, -1, -1]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down]
[0, -1, -1]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :right, :down, :down]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down]
[0, 0, -1, -1]
[0, 0, -1, 0]
[0, -1, 0, 0]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :right]
[0, -1, -1]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :right, :down]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :down]
[0, 0, -1, 0]
[0, -1, 0, 0]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :down, :right]
[0, -1, 0]
[-1, 0, 0]
[-1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :down, :down]
[0, -1, 0, 0]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
[:right, :down, :down, :down, :down]
[0, -1, 0, 0]
"--------------------------------------------------------------------------------"
false
 #+end_example

 This is similar to the Towers of Hanoi ;-)

 Incidentally, by actually returning the path that proves it's possible to go
 from the top left to the bottom right, we can solve a similar problem...

 ...Given a matrix of chars and a target string, check whether the matrix
 contains the target string by only going right or down, starting at the top
 left.

* Reads

#+latex: {\color{white}.}\vspace{-1em}
+ [[https://rubymonk.com/][Ruby Monk]] --- Interactive, in browser, tutorials
+ [[https://www.ruby-lang.org/en/documentation/][Ruby Meta-tutorial --- ruby-lang.org]]
+ [[https://www.theodinproject.com/courses/ruby-programming][The Odin Project]]
+ [[https://learnxinyminutes.com/docs/ruby/][Learn Ruby in ~30 minutes]] --- https://learnxinyminutes.com/
+ [[http://egonschiele.github.io/contracts.ruby/][contracts.ruby --- Making assertions about your code]]
+ [[https://github.com/txus/adts][Algebraic Data Types for Ruby]]
+ [[https://github.com/rubocop-hq/ruby-style-guide][Community-driven Ruby Coding Style Guide]]
+ [[http://ruby-doc.com/docs/ProgrammingRuby/][Programming Ruby: The Pragmatic Programmer's Guide]]
+ [[https://www.youtube.com/watch?v=Dji9ALCgfpM][Learn Ruby in One Video -- Derek Banas' Languages Series]]
+ [[http://rubykoans.com/][Learn Ruby Using Zen Koans]]
+ [[https://thecodeboss.dev/2015/09/metaprogramming-in-ruby-part-2/][Metaprogramming in Ruby]] ---also some useful [[https://gist.github.com/Integralist/a29212a8eb10bc8154b7#file-0-ruby-meta-programming-spells-covered-md][snippets]]
+ [[http://shop.oreilly.com/product/9781934356593.do][Seven Languages in Seven Weeks]]

  :More:
http://ruby-for-beginners.rubymonstas.org/index.html
http://rubylearning.com/satishtalim/tutorial.html
https://spin.atomicobject.com/2013/07/29/ruby-data-types-algebraic/
http://poignant.guide/book/chapter-2.html
https://medium.com/rubycademy/struct-in-ruby-cac1c7514517

Type Checking in Ruby — Check Yo Self Before You Wreck Yo Self
https://blog.appsignal.com/2019/08/27/ruby-magic-type-checking-in-ruby.html
:End:

* COMMENT produce a single column portrait of the cheat sheet
Press ~C-c C-c~ on the following incantation to produce a single column portrait of the cheat sheet.
#+name: make-portrait
#+BEGIN_SRC emacs-lisp :results none
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: CheatSheet_Portrait.pdf
     ,#+LATEX_HEADER_EXTRA: \\landscapefalse \\def\\cheatsheetcols{1}
     ,#+INCLUDE: CheatSheet.org
    ")

    (let ((org-export-use-babel nil))
      (org-mode)
      (org-latex-export-to-pdf)
      )
)
#+END_SRC

* spacing COMMENT break :accomodating_multiple_formats:ignore:

#+LATEX: \ifnum\cheatsheetcols=1 \newpage \else \columnbreak \fi

* COMMENT Making ~README.md~

  Evaluate the following source block with ~C-c C-c~
  to produce a ~README~ file.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     # HTML: <h1> Easily Making CheatSheets with Org-mode </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     {{{blurb}}}

     ◈ [[https://alhassy.github.io/RubyCheatSheet/][Website]] ◈

    ,*The listing sheet, as PDF, can be found
     [[file:CheatSheet.pdf][here]]*,
     or as a [[file:CheatSheet_Portrait.pdf][single column portrait]],
     while below is an unruly html rendition.

     # Markdown links: [title](target)

     This reference sheet is built from a
     [[https://github.com/alhassy/CheatSheet][CheatSheets with Org-mode]]
     system.

     ,#+TOC: headlines 2
     ,#+INCLUDE: CheatSheet.org
    ")

    ;; No code execution on export
    ;; ⟪ For a particular block, we use “:eval never-export” ⟫
    ;;
    (let ((org-export-use-babel nil))
      (org-mode)
      (org-md-export-to-markdown)
      )
)
#+END_SRC

#+RESULTS: make-readme
: README.md

Note that the ~blurb~ macro is defined by the user, to provide a terse description of the project.
   - Think the one-line statement at the top of a github repo page.

#    The ~d:nil~ ensures the ‘drawer’ ~:Hide: ⋯ :End:~ is not exported; it's there for me
#    as a reminder.

* COMMENT footer

0. The first “eval” below is convenience matter
   that should be loaded whenever CheatSheet.org is opened.

1. The second “eval” makes a README for the repo, whenever the file is opened,
   and is then bound to ~f11~ for convenience.

2. Likewise, the third eval is for making a portrait form of the cheatsheet ---~f12~.

3. :TOC: should not be exported in this file.

   See https://github.com/snosov1/toc-org for more on toc-org.

   (add-to-list 'org-export-exclude-tags "TOC")
   (delete "TOC" org-export-exclude-tags)

    And every time you'll be saving an org file, the first headline with a :TOC:
    tag will be updated with the current table of contents.
    (toc-org-enable)

# Local Variables:
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# eval: (local-set-key (kbd "<f11>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval: (local-set-key (kbd "<f12>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-portrait") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval:    (add-to-list 'org-export-exclude-tags "TOC")
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# compile-command: (org-latex-export-to-pdf)
# End:
